git config --global user.name "hzlnqodrey"
murders
library(dslabs)
data("murders")
force(murders)
murders
sum(murders$total)
str()
str(murders)
names(murders)
murders$abb
a = murders$abb
View(a)
class(a)
[murders$abb]
murders[murders$abb,]
[]
[murders$abb]
murders$abb[1]
murders$abb[1:50]
murders$abb[51]
murders$abb[[1]]
murders$abb[[1]][[3]]
murders$abb[]
b = murders$abb[]
class(b)
print(paste("Apakah variabel 'a' dan 'b' bernilai sama? ", a == b))
a==b
murders$region
levels(murders$region)
length(murders$region)
length(levels(murders$region))
View(murders)
table(murders)
iris
summary(iris)
View(iris)
library(dslabs)
data(murders)
murder_rate <- murders$total / murders$population*100000
ind <- which.min(murder_rate)
if(murder_rate[ind] < 0.5){
print(murders$state[ind])
} else{
print("Tidak ada")
}
View(murders)
rank(murder_rate)
ind
murder_rate
table(murders$state, murder_rate)
table(murders$state[ind], murder_rate)
table(murders$state[ind], ind)
table(murders$state[ind])
table(murders$state[murder_rate])
table(murders$state[murder_rate], sort(murder_rate))
sort(murder_state)
sort(murder_rate)
SELECT *
from murders
data.frame(state = murder$state, rate = murder_rate)
mr <- data.frame(state = murders$state, rate = murder_rate)
mr
sort(mr)
View(mr)
compute_s_n <- function(n){
x <- 1:n
sum(x)
}
m <- 25
s_n <- vector(length = m) # create an empty vector
for(n in 1:m){
s_n[n] <- compute_s_n(n)
}
s_n
n <- 1:25
compute_s_n(n)
n <- 10
compute_s_n <- function(n){
+     x <- 1:n
+     sum(x)
+ }
vector_var <- c(1,2,3,4,5,6,7)
nchar(vector_var)
?nchar
vector_var <- c("hazlan", "qoder", "rivano")
nchar(vector_var)
View(murders)
nchar(vector_var[1])
nchar(vector_var[2])
ifelse(nchar(vector_var) >= 8, new_names = vector_var, N/A)
ifelse(nchar(vector_var) >= 8, new_names = vector_var, NA)
ifelse(nchar(vector_var) >= 8, vector_var, NA)
nchar(murders$state)
nchar(murders$state) > 8
ifelse(nchar(murders$state) > 8, new_names = murders$state)
ifelse(nchar(murders$state) > 8, murders$state)
ifelse(nchar(murders$state) > 8, murders$state, NA)
new_names = ifelse(nchar(murders$state) > 8, murders$state, NA)
new_names
new_names = ifelse(nchar(murders$state) > 8, murders$state, "")
new_names
new_names = ifelse(nchar(murders$state) > 8, murders$state, continue)
new_names = ifelse(nchar(murders$state) > 8, murders$state, next)
new_names = ifelse(nchar(murders$state) > 8, murders$state, 0)
new_names
nchar(murders$state) > 8
nchar(murders$state)
new_names = nchar(murders$state) > 8
new_names
new_names = nchar(murders$state) > 8
new_names = ifelse(nchar(murders$state) > 8, murders$state, NA)
new_names
new_names = ifelse(nchar(murders$state) > 8, murders$abb, NA)
new_names
sum_n <- function(n) {}
s = c()
sum_n <- function(x) {
s = sum(x)
}
sum_n(5)
s = c()
sum_n <- function(x) {
s = sum(x)
s
}
sum_n(5)
s = c()
sum_n <- function(x) {
s = sum(x)
s
}
sum_n(1:5)
s = c()
sum_n <- function(x) {
s = sum(x)
s
}
sum_n(1:5000)
s[10]
sum_n <- function(x) {
s = sum(x)
s
}
sum_n(1:5000)
sum_n <- function(n) {
x = 1:n
sum(x)
x
}
sum_n <- function()awd
sum_n <- function(n) {
x = 1:n
sum(x)
x
}
x
x
x
sum_n(5000)
sum_n <- function(n) {
x = 1:n
sum(x)
}
sum_n(5000)
sum_n(10)
sum_n(20)
sum_n(50*50^5)
sum_n(50*50^5^100)
sum_n(50*50^5^101)
sum_n(50*50^5^5)
sum_n(50*50^5^1)
sum_n(50*50^5^2)
sum_n(50*50^5^1.2)
power(2)
5^5
sum_n <- function(n) {
x = 1:n
sum(x^x)
}
sum_n(10)
sum_n <- function(n) {
x = 1:n
sum(x^x)
}
sum_n(5)
sum_n <- function(n) {
x = 1:n
sum(x^x)
}
sum_n(2)
sum_n <- function(n) {
x = 1:n
sum(x^x)
}
sum_n(3)
sum_n <- function(n) {
x = 1:n
sum(x^x)
}
sum_n(4)
sum_n <- function(n) {
x = 1:n
sum(x^x)
}
sum_n(5)
?math
?Math
knitr::opts_chunk$set(echo = TRUE)
sum_n <- function(n) {
x = 1:n
c = x
sum(c^c)
}
sum_n(10)
2^(1:5)
(1:5)^2
sum((1:5)^2)
sum((1:5)^10)
sum((1:10)^2)
sum((1:3)^2)
compute_s_n <- function(n) {
sum((1:n)^2)
}
compute_s_n(10)
compute_s_n(5)
compute_s_n(4)
compute_s_n(100)
compute_s_n(1000000)
compute_s_n(1000000^2)
sum_n <- function(n) {
sum(1:n)
}
sum_n(5000)
sum_n <- function(n) {
x = 1:n
sum(x)
}
sum_n(5000)
m = 25
s_n = vector(length = m)
for (n in 1:m) {
s_n[n] = compute_s_n(n)
}
clear
m = 25
s_n = vector(length = m)
for (n in 1:m) {
s_n[n] = compute_s_n(n)
}
s_n[2]
s_n[3]
s_n[4]
s_n[5]
s_n[6]
s_n[10]
sum(s_n)
sum(s_n[10])
s_n
m = 25
s_n = vector(length = m)
for (n in 1:m) {
s_n[n] = compute_s_n(n)
}
s_n
n = 1:25
s_n <- sapply(n, compute_s_n)
s_n
library(here)
dr_here()
dr_here(praktikum2020)
library(here)
dr_here()
here() # dimanakah alamat direktori utama/Project berada?
here("data-raw", "udara_bandung.xlsx")
as_tibble(murders)
install.packages("tibble")
install.packages("tibble")
class(as_tibble(murders))
?tibble
??tibble
murders %>% group_by(region)
install.packages("tidyverse")
install.packages("dplyr")
murders %>% group_by(region)
install.packages(dslabs)
install.packages("dslabs")
library(
"murders"
)
library(murders)
library(murder)
library(dslabs)
library(dplyr)
murders %>% group_by(region)
as_tibble(murders)
murders
class(murderse)
class(murders)
str(murders)
knitr::opts_chunk$set(echo = TRUE)
murders_tibble <- as_tibble(murders)
murders_tibble
str(murders)
View(murders_tibble)
murders$population
murders$Population
murders_tibble$Population
murders %>% group_by(region)
exp(mean(log(murders$population)))
expected_output <- murders %>%
exp %>%
mean %>%
log(murders$population)
expected_output <- murders$population %>%
exp %>%
mean %>%
log
expected_output
expected_output <- murders$population %>%
log %>%
mean %>%
exp
expected_output
map_df
